using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OwaspSAMM.DAL
{
    public enum UserDataRoleType { Administrator, Manager, Individual, BusinessUnitOwner }
    public enum PeerAuthorizedType { PeerAuthorized, PeerNotAuthorized }

    /// <summary>
    /// UserDataPartial is a partial class that is separate from the class that is generated by EF.  This allows for helper methods that don't
    /// get destroyed when the data model is regenerated.
    /// 
    /// Two constuctor methods have been added to simplify getting the user's data.  
    /// 
    /// NOTE:  If the UserData model changes, the Map2Entity method will need to be updated to match the change in fields. 
    /// </summary>
    [MetadataTypeAttribute(typeof(UserDataMetadata))]
    [Serializable]
    public partial class UserData
    {
        private OwaspSAMMRepository DAL = new OwaspSAMMRepository();

        // Constructor for passing account string
        public UserData(string account)
            : this()
        {
            // Fetch the data and map it to the object
            var ud = DAL.GetUserData(account);
            Map2Entity(ud);
        }

        // Constructor for passing user Identity
        public UserData(int identity)
            : this()
        {
            // Fetch the data and map it to the object
            var ud = DAL.GetUserData(identity);
            Map2Entity(ud);
        }


        public bool IsManager()
        {
            return this.Manager.HasValue ? this.Manager.Value : false;
        }

        public bool IsAdministrator()
        {
            return this.Administrator.HasValue ? this.Administrator.Value : false;
        }


        public bool IsBUOwner()
        {
            return this.BUOwner.HasValue ? this.BUOwner.Value : false;
        }

        /// <summary>
        /// MyAssessments() Retrieve assessments owned by the user
        /// </summary>
        /// <returns>List of Assessment</returns>
        public List<Assessment> MyAssessments()
        {
            return DAL.GetAssessments(this.UserID);
        }

        /// <summary>
        /// PeerAssessments() Retrieve assessments owned by peers of the user (having the same manager)
        /// </summary>
        /// <returns>List of Assessment</returns>
        public List<Assessment> PeerAssessments()
        {
            return DAL.GetAssessments(myPeers());
        }

        /// <summary>
        /// TeamAssessments() Retrieve assessments owned by team members of the user who is a manager.  Team members are those 
        /// who report to a manager.
        /// </summary>
        /// <returns>List of Assessment</returns>
        public List<Assessment> TeamAssessments()
        {
            return DAL.GetAssessments(myTeam());

        }

        /// <summary>
        /// AdminAssessment() Retrieve assessments not owned by the user.  This is for Administrators
        /// </summary>
        /// <returns>List of Assessment</returns>
        public List<Assessment> AdminAssessments()
        {
            return DAL.GetAssessmentsNotOwned(this.UserID);
        }

        /// <summary>
        /// myPeers() Retrieve a list of UserID that have the same manager (Peers)
        /// </summary>
        /// <returns>List of Int</returns>
        public List<int> myPeers()
        {
            return DAL.GetPeerIdentityList(this.UserID);
        }


        /// <summary>
        /// myTeam() Retrieve a list of team member UserIDs for a Manager.
        /// </summary>
        /// <returns></returns>
        public List<int> myTeam()
        {
            return DAL.GetTeamIdentityList(this.UserID);
        }


        public int AssessmentCount()
        {
            return DAL.GetAssessmentCount(this.UserID);
        }

        public string FullName { get { return this.FirstName + " " + this.LastName; } }

        public UserDataRoleType UserType()
        {
            UserDataRoleType udt = new UserDataRoleType();

            if (IsAdministrator())
                udt = UserDataRoleType.Administrator;
            else 
                if (IsBUOwner())
                    udt = UserDataRoleType.BusinessUnitOwner;
                else 
                    if (IsManager())
                        udt = UserDataRoleType.Manager;
                    else 
                        udt = UserDataRoleType.Individual;

            return udt;
        }

        /// <summary>
        /// AssessmentAuthorized - Determines if the user is Authorized to view/edit/update an assessment based on the OwnerID of the assessment.  If
        /// the Owner of the assessment is in the User's Peer list (or Team list if the user is a manager) then they are authorized to update
        /// the assessment.
        /// </summary>
        /// <param name="ownerID">Int - OwnerID of the Assessment to be updated</param>
        /// <returns></returns>
        public bool AssessmentAuthorized(int assessmentID, PeerAuthorizedType pat)
        {
            // Checks to see if the user is authorized to view/update an assessment based on the OwnerID of the assessment. If the Owner is a
            // peer or team member then they are authorized.
            // the list of peers or team.

            bool authorized = false;
            var assmt = DAL.GetAssessment(assessmentID, AssessmentLoadType.Detail);

            if (assmt != null)
            {
                switch (this.UserType())
                {
                    case UserDataRoleType.Administrator:
                        authorized = true;
                        break;
                    case UserDataRoleType.BusinessUnitOwner:
                        authorized = this.BusinessUnit == assmt.BusinessUnit;
                        break;
                    case UserDataRoleType.Manager:
                        authorized = this.myTeam().Contains(assmt.OwnerID) || this.UserID == assmt.OwnerID;
                        break;
                    case UserDataRoleType.Individual:
                        if (pat == PeerAuthorizedType.PeerAuthorized)
                            authorized = this.myPeers().Contains(assmt.OwnerID) || this.UserID == assmt.OwnerID;
                        else
                            authorized = this.UserID == assmt.OwnerID;
                        break;
                }
            }

            return authorized;
        }

        #region Private Methods

        /// <summary>
        /// Map2Entity maps the database object to the entity when called from the constructor methods above
        /// </summary>
        /// <param name="ud"></param>
        /// 
        private void Map2Entity(UserData ud)
        {
            this.UserID = ud.UserID;
            this.UserDomain = ud.UserDomain;
            this.UserNTID = ud.UserNTID;
            this.LastName = ud.LastName;
            this.FirstName = ud.FirstName;
            this.ManagerID = ud.ManagerID;
            this.MgrLastName = ud.MgrLastName;
            this.MgrFirstName = ud.MgrFirstName;
            this.Manager = ud.Manager;
            this.Administrator = ud.Administrator;
            this.ManagerEID = ud.ManagerEID;
            this.LastLoginDate = ud.LastLoginDate;
            this.OrgName = ud.OrgName;
            this.BusinessUnit = ud.BusinessUnit;
            this.BUOwner = ud.BUOwner;
        }

        #endregion
    }

    public class UserDataMetadata
    {
        [Required(ErrorMessage = "NT ID is required")]
        [Display(Name = "NT ID")]
        [StringLength(50)]
        public string UserNTID { get; set; }

        [Required(ErrorMessage = "Domain is required")]
        [Display(Name = "Domain")]
        [StringLength(50)]
        public string UserDomain { get; set; }

        [Display(Name = "Last Name")]
        public string LastName { get; set; }

        [Display(Name = "First Name")]
        public string FirstName { get; set; }

        [Display(Name = "Manager ID")]
        public string ManagerID { get; set; }

        [Display(Name = "Mgr Last Name")]
        public string MgrLastName { get; set; }

        [Display(Name = "Mgr First Name")]
        public string MgrFirstName { get; set; }

        [Display(Name = "Manager EID")]
        public string ManagerEID { get; set; }

        [Display(Name = "Org Name")]
        public string OrgName { get; set; }

        [Display(Name = "Last Login Date")]
        public Nullable<System.DateTime> LastLoginDate { get; set; }

        [Display(Name = "Administrator")]
        public Nullable<bool> Administrator { get; set; }

        [Display(Name = "Manager")]
        public Nullable<bool> Manager { get; set; }

        [Display(Name = "Business Unit")]
        public string BusinessUnit { get; set; }

        [Display(Name = "BU Owner")]
        public Nullable<bool> BUOwner { get; set; }
    }

}
